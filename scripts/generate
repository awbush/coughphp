#!/usr/bin/php
<?php

try {
	// Include the Cough generation classes
	include_once(dirname(dirname(__FILE__)) . '/config/application.inc.php');
	
	// Which config to use?
	if (!isset($_SERVER['argc'])) {
		echo 'This script must be run from the command line, e.g. `./generate config_name`' . "\n";
		exit();
	}
	$argCount = $_SERVER['argc'];
	$args = $_SERVER['argv'];
	
	switch ($argCount) {
		case 0:
		case 1:
			echo 'Pass the config_name to use as the second parameter, e.g. `./generate config_name`' . "\n";
			exit();
			break;
		case 2:
			$configName = $args[1];
			break;
	}
	
	$schemaGeneratorConfigFile = CONFIG_PATH . $configName . '/database_schema_generator.inc.php';
	$coughGeneratorConfigFile  = CONFIG_PATH . $configName . '/cough_generator.inc.php';

	// Get the database config
	$schemaGeneratorConfig = DatabaseSchemaGeneratorConfig::constructFromFile($schemaGeneratorConfigFile);

	// Load the schema into memory
	$schemaGenerator = new DatabaseSchemaGenerator($schemaGeneratorConfig);
	$schema = $schemaGenerator->generateSchema();
	
	// Manipulate the schema (to add any missed relationships, e.g.)
	$manipulator = new SchemaManipulator($schemaGeneratorConfig);
	$manipulator->manipulateSchema($schema);
	
	// Get the cough generator config
	$coughGeneratorConfig = CoughGeneratorConfig::constructFromFile($coughGeneratorConfigFile);

	// Generate files into memory
	$coughGenerator = new CoughGenerator($coughGeneratorConfig);
	$classes = $coughGenerator->generateCoughClasses($schema);
	
	// Write files to disk
	// echo "\n";
	$coughWriter = new CoughWriter($coughGeneratorConfig);
	if (!$coughWriter->writeClasses($classes)) {
		echo 'Trouble writing classes:' . "\n";
		echo '------------------------' . "\n";
		foreach ($coughWriter->getErrorMessages() as $message) {
			echo $message . "\n";
		}
		echo "\n";
	} else {
		$lineCount = 0;
		foreach ($classes as $class) {
			$lineCount += substr_count($class->getContents(),"\n");
		}
		echo 'Success writing ' . count($classes) . ' classes (' . number_format($lineCount) . ' lines) with ' . $schema->getNumberOfHasOneRelationships() . ' one-to-one relationships and ' . $schema->getNumberOfHasManyRelationships() . ' one-to-many relationships!' . "\n";
	}
	
} catch (Exception $e) {
	echo $e->getMessage() . "\n";
	
	// if (DEV) {
	// 	echo 'Trace:' . "\n";
	// 	print_r($e->getTrace());
	// }
}

?>